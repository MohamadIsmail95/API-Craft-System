@using ApiCraftSystem.Repositories.AccountService
@using ApiCraftSystem.Repositories.AccountService.Dtos
@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            API Craft System
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
      

        <AuthorizeView>
            <Authorized>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>
               
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Api-Craft">
                        <div>
                            <i class="bi bi-plugin" style="font-size:x-large"></i>
                            API
                        </div>
                      
                    </NavLink>
                </div>


                <div class="nav-item px-3">
                    <a class="nav-link" href="hangfire" target="_blank" rel="noopener noreferrer">
                        <div>
                            <i class="bi bi-card-checklist" style="font-size:x-large"></i>
                            Schedules
                        </div>
                    </a>

                </div>



                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Data-Craft">
                        <div>
                            <i class="bi bi-boxes" style="font-size:x-large"></i>
                            Views
                        </div>

                    </NavLink>
                </div>

                @if (CurrentUser.RoleName == "Admin" || CurrentUser.RoleName == "SuperAdmin")
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="app-users">
                            <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Users
                        </NavLink>
                    </div>

                }



                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
               
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>

               
            </NotAuthorized>
        </AuthorizeView>
    </nav>
    <footer class="copyright-footer">
        ©@CurrentDate TECH DATA  ANALYSIS
    </footer>
</div>

@code {
    private string? currentUrl;
    private UserDto CurrentUser = new UserDto();
    private string CurrentDate = string.Empty;
    [Inject] private IAccountService _accountService { get; set; }

    protected override void OnInitialized()
    {
        CurrentUser =  _accountService.GetCurrentUser();
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        CurrentDate = DateTime.Now.Date.Year.ToString();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

