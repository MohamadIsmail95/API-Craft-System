@page "/Account/Login"
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using ApiCraftSystem.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ApiCraftSystem.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<div class="container d-flex justify-content-end align-items-center min-vh-100 text-black">
    <div class="card shadow-lg rounded-4 p-4" style="width: 43%; background-image:linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%)">

        <div class="text-center mb-4">
            <h2 class="fw-bold text-white">API Craft System</h2>
            <p class=" text-white">Please login to your account</p>
        </div>

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control text-black border-secondary" autocomplete="username" aria-required="true" placeholder="username" />
                <label for="Input.Email" class="text-black-50">Username</label>
                <ValidationMessage For="() => Input.Email" class="text-danger small" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control  text-black border-secondary" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="Input.Password" class="text-black-50">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger small" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMeCheck" />
                <label class="form-check-label text-white-50" for="rememberMeCheck">Remember me</label>
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary btn-lg">Log in</button>
            </div>

            <div class="text-center mt-3">
                <a href="Account/ForgotPassword" class="text-decoration-none text-info small">Forgot your password?</a><br />
                @* Uncomment if needed *@
                @* <a href="Account/ForgotPassword" class="text-decoration-none text-info small">Forgot your password?</a><br />
                <a href="Account/Register" class="text-decoration-none text-info small">Register as a new user</a><br />
                <a href="Account/ResendEmailConfirmation" class="text-decoration-none text-info small">Resend email confirmation</a> *@
            </div>
        </EditForm>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        ReturnUrl = "Api-Craft";
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        // [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
